{
    // {int} Maximum error before stopping
    "maxerr"        : 50,

    // Enforcing
    // Prohibit bitwise operators (&, |, ^, etc.)
    "bitwise"       : true,
    // Identifiers must be in camelCase
    "camelcase"     : false,
    // Require {} for every new block or scope
    "curly"         : false,
    // Require triple equals (===) for comparison
    "eqeqeq"        : false,
    // prohibits overwriting prototypes of native objects such as Array and Date
    "freeze"        : true,
    // Require filtering for..in loops with obj.hasOwnProperty()
    "forin"         : true,
    // Require immediate invocations to be wrapped in parens
    // e.g. `(function () { } ());`
    "immed"         : false,
    // {int} Number of spaces to use for indentation
    "indent"        : 2,
    // Require variables/functions to be defined before being used
    "latedef"       : false,
    // Require capitalization of all constructor functions e.g. `new F()`
    "newcap"        : false,
    // Prohibit use of `arguments.caller` and `arguments.callee`
    "noarg"         : true,
    // Prohibit use of empty blocks
    "noempty"       : true,
    // Prohibit "non-breaking whitespace" characters.
    "nonbsp"        : true,
    // Prohibit use of constructors for side-effects (without assignment)
    "nonew"         : false,
    // Prohibit use of `++` & `--`
    "plusplus"      : false,
    // Quotation mark consistency:
    //   false    : do nothing (default)
    //   true     : ensure whatever is used is consistent
    //   "single" : require single quotes
    //   "double" : require double quotes
    "quotmark"      : false,
    // Require all non-global variables to be declared (prevents global leaks)
    "undef"         : true,
    // Require all defined variables be used
    "unused"        : true,
    // Requires all functions run in ES5 Strict Mode
    "strict"        : true,
    // {int} Max number of formal params allowed per function
    "maxparams"     : false,
    // {int} Max depth of nested blocks (within functions)
    "maxdepth"      : false,
    // {int} Max number statements per function
    "maxstatements" : false,
    // {int} Max cyclomatic complexity per function
    "maxcomplexity" : false,
    // {int} Max number of characters per line
    "maxlen"        : 80,

    // Relaxing
    // Tolerate Automatic Semicolon Insertion (no semicolons)
    "asi"           : true,
    // Tolerate assignments where comparisons would be expected
    "boss"          : false,
    // Allow debugger statements e.g. browser breakpoints.
    "debug"         : false,
    // Tolerate use of `== null`
    "eqnull"        : false,
    // Allow ES5 syntax (ex: getters and setters)
    "es5"           : false,
    // Allow ES.next (ES6) syntax (ex: `const`)
    "esnext"        : true,
    // Allow Mozilla specific syntax (extends and overrides esnext features)
    // (ex: `for each`, multiple try/catch, function expressionâ€¦)
    "moz"           : true,
    // Tolerate use of `eval` and `new Function()`
    "evil"          : false,
    // Tolerate `ExpressionStatement` as Programs
    "expr"          : false,
    // Tolerate defining variables inside control statements
    "funcscope"     : false,
    // Allow global "use strict" (also enables 'strict')
    "globalstrict"  : false,
    // Tolerate using the `__iterator__` property
    "iterator"      : false,
    // Tolerate omitting a semicolon for the last statement of a 1-line block
    "lastsemic"     : false,
    // Tolerate possibly unsafe line breakings
    "laxbreak"      : false,
    // Tolerate comma-first style coding
    "laxcomma"      : false,
    // Tolerate functions being defined in loops
    "loopfunc"      : false,
    // Tolerate multi-line strings
    "multistr"      : false,
    // Tolerate generator functions with no yield statement in them.
    "noyield"       : false,
    // Tolerate invalid typeof operator values
    "notypeof"      : false,
    // Tolerate using the `__proto__` property
    "proto"         : false,
    // Tolerate script-targeted URLs
    "scripturl"     : false,
    // Allows re-define variables later in code e.g. `var x=1; x=2;`
    "shadow"        : false,
    // Tolerate using `[]` notation when it can still be expressed in dot
    // notation
    "sub"           : false,
    // Tolerate `new function () { ... };` and `new Object;`
    "supernew"      : false,
    // Tolerate using this in a non-constructor function
    "validthis"     : false,

    // Environments
    "browser"       : true,     // Web Browser (window, document, etc)
    "couch"         : false,    // CouchDB
    "devel"         : true,     // Development/debugging (alert, confirm, etc)
    "dojo"          : false,    // Dojo Toolkit
    "jasmine"       : true,    // Jasmine
    "jquery"        : false,    // jQuery
    "mocha"         : true,     // Mocha
    "mootools"      : false,    // MooTools
    "node"          : true,    // Node.js
    // Widely adopted globals (escape, unescape, etc)
    "nonstandard"   : false,
    "prototypejs"   : false,    // Prototype and Scriptaculous
    "qunit"         : false,    // QUnit
    "rhino"         : false,    // Rhino
    "shelljs"       : false,     // ShellJS
    "worker"        : false,    // Web Workers
    "wsh"           : false,    // Windows Scripting Host
    "yui"           : false,    // Yahoo User Interface

    // Custom Globals
    "globals": {
      "angular": true
    }
}
